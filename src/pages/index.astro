---
import Layout from "@/layouts/Layout.astro";
import Link from "@/components/Link.astro";
import Copy from "@/components/Copy.astro";
import Keyboard from "@/components/Keyboard.astro";

import pgp from "@/data/pubkey.asc?raw";

export const prerender = false;
---

<Layout title="anish.land">
    <main class="flex justify-center items-center h-full w-full">
        <div class="w-full max-w-md px-4 flex flex-col gap-3 mx-auto">
            <h1>
                <span class="text-2xl">anish</span> &middot;
                <span>అనీష్</span>
            </h1>

            <p class="text-sm text-neutral-500">
                hi! i'm anish, a student and software engineer from new jersey.
                i'm currently studying mathematics at carnegie mellon
                university.
            </p>

            <p class="text-sm text-neutral-500">
                i am a fan of open source, and you can find nearly all of my
                work on github&mdash;press <Keyboard text="c" />!
            </p>

            <hr class="border-neutral-200 my-2" />

            <div class="flex flex-col gap-0.5">
                <Copy
                    name="ssh"
                    value="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDwjDM2gTgro+aN81I65BFexfLXq1u/8AJ3PmCTX5X/a i@anish.land"
                    >ssh-ed25519 [...] i@anish.land</Copy
                >

                <Copy
                    name="age"
                    value="age170uyxawp784wndtsyyp33dpz53xyzggp545a6zu2a2pu4mxmv9gsq3zax7"
                    >age170uyxawp784wndtsy[...]zax7</Copy
                >

                <Copy name="pgp" value={pgp}
                    >2A0A 16F5 E026 BE3B A47F <br /> B7A6 841A FB68 9A5B ACCB</Copy
                >
            </div>

            <hr class="border-neutral-200 my-2" />

            <div class="flex flex-col gap-0.5">
                <p class="font-bold">pages</p>
                <div
                    class="flex flex-col gap-y-0.5 sm:flex-row sm:justify-between"
                >
                    <div>
                        <Link href="/about">[about]</Link> &middot;
                        <span class="text-sm"><Keyboard text="a" /></span>
                    </div>

                    <div>
                        <Link href="/contact">[contact]</Link> &middot;
                        <span class="text-sm"><Keyboard text="c" /></span>
                    </div>

                    <div>
                        <Link href="/projects">[projects]</Link> &middot;
                        <span class="text-sm"><Keyboard text="p" /></span>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <div id="notes-container" class="fixed inset-0 pointer-events-none z-10">
        <!-- Notes will be rendered here -->
    </div>

    <!-- Inline note input -->
    <input
        id="note-input"
        type="text"
        class="fixed hidden z-20 pointer-events-auto bg-transparent border-none outline-none text-xs text-gray-600 placeholder-gray-400 w-32"
        maxlength="50"
        placeholder="Write your note here..."
    />
</Layout>

<script is:inline>
    // Load and display approved notes
    async function loadNotes() {
        try {
            const response = await fetch("/api/notes");
            const notes = await response.json();

            const container = document.getElementById("notes-container");
            container.innerHTML = "";

            notes.forEach((note) => {
                const noteEl = document.createElement("div");
                noteEl.className =
                    "absolute pointer-events-auto bg-yellow-100 border border-yellow-300 p-2 rounded shadow-sm text-xs max-w-xs";
                noteEl.style.left = `${note.x}px`;
                noteEl.style.top = `${note.y}px`;
                noteEl.textContent = note.content;
                container.appendChild(noteEl);
            });
        } catch (error) {
            console.error("Failed to load notes:", error);
        }
    }

    let clickX, clickY;
    const input = document.getElementById("note-input");

    // Click anywhere to create note
    document.addEventListener("click", (e) => {
        // Don't create note if clicking on interactive elements
        if (e.target.closest("a, button, input, textarea, #notes-container")) {
            return;
        }

        clickX = e.clientX;
        clickY = e.clientY;

        input.style.left = `${clickX}px`;
        input.style.top = `${clickY}px`;
        input.classList.remove("hidden");
        input.focus();
    });

    function finish() {
        input.value = "";
        input.classList.add("hidden");
    }

    // Submit on Enter, cancel on Escape
    input.addEventListener("keydown", async (e) => {
        if (e.key === "Enter") {
            const content = input.value.trim();
            if (!content) return;

            try {
                const response = await fetch("/api/notes", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        content,
                        x: clickX,
                        y: clickY,
                    }),
                });

                if (response.ok) {
                    finish();
                    alert("Note submitted for approval");
                } else {
                    alert("Failed to submit note");
                }
            } catch (error) {
                alert("Error submitting note");
            }
        } else if (e.key === "Escape") {
            finish();
        }
    });

    // Hide input when clicking elsewhere
    input.addEventListener("blur", finish);

    // Load notes on page load
    loadNotes();
</script>
