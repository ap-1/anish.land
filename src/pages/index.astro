---
import Layout from "@/layouts/Layout.astro";
import Link from "@/components/Link.astro";
import Copy from "@/components/Copy.astro";
import Keyboard from "@/components/Keyboard.astro";

import pgp from "@/data/pubkey.asc?raw";
---

<Layout title="anish.land">
    <div
        id="notes-toggle"
        class="fixed top-4 right-4 z-30 text-xs cursor-pointer"
    >
        <span class="text-blue-900 hover:underline"> [hide notes] </span>
        &middot; <Keyboard text="n" />
    </div>

    <main class="flex justify-center items-center h-full w-full">
        <div class="w-full max-w-md px-4 flex flex-col gap-3 mx-auto">
            <h1>
                <span class="text-2xl">anish</span> &middot;
                <span>అనీష్</span>
            </h1>

            <p class="text-sm text-neutral-500">
                hi! i'm anish, a student and software engineer from new jersey.
                i'm currently studying mathematics at carnegie mellon
                university.
            </p>

            <p class="text-sm text-neutral-500">
                i am a fan of open source, and you can find nearly all of my
                work on github&mdash;press <Keyboard text="c" />!
            </p>

            <hr class="border-neutral-200 my-2" />

            <div class="flex flex-col gap-0.5">
                <Copy
                    name="ssh"
                    value="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDwjDM2gTgro+aN81I65BFexfLXq1u/8AJ3PmCTX5X/a i@anish.land"
                    >ssh-ed25519 [...] i@anish.land</Copy
                >

                <Copy
                    name="age"
                    value="age170uyxawp784wndtsyyp33dpz53xyzggp545a6zu2a2pu4mxmv9gsq3zax7"
                    >age170uyxawp784wndtsy[...]zax7</Copy
                >

                <Copy name="pgp" value={pgp}
                    >2A0A 16F5 E026 BE3B A47F <br /> B7A6 841A FB68 9A5B ACCB</Copy
                >
            </div>

            <hr class="border-neutral-200 my-2" />

            <div class="flex flex-col gap-0.5">
                <p class="font-bold">pages</p>
                <div
                    class="flex flex-col gap-y-0.5 sm:flex-row sm:justify-between"
                >
                    <div>
                        <Link href="/about">[about]</Link> &middot;
                        <span class="text-sm"><Keyboard text="a" /></span>
                    </div>

                    <div>
                        <Link href="/contact">[contact]</Link> &middot;
                        <span class="text-sm"><Keyboard text="c" /></span>
                    </div>

                    <div>
                        <Link href="/projects">[projects]</Link> &middot;
                        <span class="text-sm"><Keyboard text="p" /></span>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <div id="notes-container" class="fixed inset-0 pointer-events-none z-10">
        <!-- Notes will be rendered here -->
    </div>

    <!-- Inline note input -->
    <div
        id="note-input-container"
        class="fixed hidden z-20 pointer-events-auto"
    >
        <input
            id="note-input"
            type="text"
            class="bg-transparent border-none outline-none text-xs text-neutral-500 placeholder-neutral-300 w-32 block"
            maxlength="50"
            placeholder="Write your note here..."
        />
        <div class="flex gap-2 mt-1">
            <button id="note-cancel" class="text-xs">
                <Keyboard text="Esc" />
            </button>
            <button id="note-submit" class="text-xs">
                <Keyboard text="Enter" />
            </button>
        </div>
    </div>
</Layout>

<script is:inline>
    function getNotesEnabled() {
        return localStorage.getItem("notesEnabled") !== "false";
    }

    function setNotesEnabled(enabled) {
        localStorage.setItem("notesEnabled", enabled.toString());
    }

    function getPendingNotes() {
        try {
            return JSON.parse(localStorage.getItem("pendingNotes") || "[]");
        } catch {
            return [];
        }
    }

    function savePendingNote(note) {
        const pending = getPendingNotes();
        pending.push(note);
        localStorage.setItem("pendingNotes", JSON.stringify(pending));
    }

    async function loadNotes() {
        const container = document.getElementById("notes-container");

        if (!getNotesEnabled()) {
            container.innerHTML = "";
            return;
        }

        try {
            // Get approved notes from server
            const response = await fetch("/api/notes");
            const approvedNotes = await response.json();

            // Get pending notes from localStorage
            const pendingNotes = getPendingNotes();

            // Remove pending notes that are now approved
            const approvedIds = new Set(approvedNotes.map((note) => note.id));
            const stillPending = pendingNotes.filter(
                (note) => !approvedIds.has(note.id),
            );

            // Update localStorage if any pending notes were approved
            if (stillPending.length !== pendingNotes.length) {
                localStorage.setItem(
                    "pendingNotes",
                    JSON.stringify(stillPending),
                );
            }

            container.innerHTML = "";

            const screenWidth = window.innerWidth;
            const screenHeight = window.innerHeight;

            // Render notes
            approvedNotes.forEach((note) => {
                const noteEl = document.createElement("div");
                noteEl.className =
                    "absolute pointer-events-auto bg-transparent border-none outline-none text-xs text-neutral-300 max-w-xs";
                noteEl.style.left = `${note.xPercent * screenWidth}px`;
                noteEl.style.top = `${note.yPercent * screenHeight}px`;
                noteEl.textContent = note.content;
                container.appendChild(noteEl);
            });

            stillPending.forEach((note) => {
                const noteEl = document.createElement("div");
                noteEl.className =
                    "absolute pointer-events-auto bg-transparent border-none outline-none text-xs text-neutral-300 max-w-xs italic";
                noteEl.style.left = `${note.xPercent * screenWidth}px`;
                noteEl.style.top = `${note.yPercent * screenHeight}px`;
                noteEl.textContent = `${note.content} (pending)`;
                container.appendChild(noteEl);
            });
        } catch (error) {
            console.error("Failed to load notes:", error);
        }
    }

    function initializeNotes() {
        let clickX, clickY;
        let isInputActive = false;

        const inputContainer = document.getElementById("note-input-container");
        const input = document.getElementById("note-input");
        const submitBtn = document.getElementById("note-submit");
        const cancelBtn = document.getElementById("note-cancel");

        const toggleBtn = document.getElementById("notes-toggle");
        const toggleSpan = toggleBtn.querySelector("span");

        if (!input) return;

        toggleSpan.textContent = getNotesEnabled()
            ? "[hide notes]"
            : "[show notes]";

        // Click anywhere to create note
        document.addEventListener("click", (e) => {
            // Don't create notes if notes are disabled
            if (!getNotesEnabled()) {
                return;
            }

            // If input is currently active, cancel it
            if (isInputActive) {
                finish();
                return;
            }

            // Don't create note if clicking on interactive elements
            if (
                e.target.closest(
                    "a, button, input, code, textarea, #notes-toggle, #notes-container",
                )
            ) {
                return;
            }

            clickX = e.clientX;
            clickY = e.clientY;

            inputContainer.style.left = `${clickX}px`;
            inputContainer.style.top = `${clickY}px`;
            inputContainer.classList.remove("hidden");
            input.focus();

            isInputActive = true;
        });

        function finish() {
            input.value = "";
            inputContainer.classList.add("hidden");
            isInputActive = false;
        }

        async function submit() {
            const content = input.value.trim();
            if (!content) return;

            const screenWidth = window.innerWidth;
            const screenHeight = window.innerHeight;

            try {
                const response = await fetch("/api/notes", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        content,
                        x: clickX,
                        y: clickY,
                        screenWidth,
                        screenHeight,
                    }),
                });

                if (response.ok) {
                    const result = await response.json();
                    savePendingNote({
                        id: result.id,
                        content: content,
                        xPercent: clickX / screenWidth,
                        yPercent: clickY / screenHeight,
                    });

                    // Show the new pending note
                    finish();
                    loadNotes();

                    // Make sure the input container is hidden before alerting
                    setTimeout(() => alert("Note submitted for approval"), 0);
                } else {
                    alert("Failed to submit note");
                }
            } catch (error) {
                alert("Error submitting note");
            }
        }

        // Submit on Enter, cancel on Escape
        input.addEventListener("keydown", async (e) => {
            if (e.key === "Enter") {
                await submit();
            } else if (e.key === "Escape") {
                finish();
            }
        });

        submitBtn.addEventListener("click", submit);
        cancelBtn.addEventListener("click", finish);
        toggleBtn.addEventListener("click", () => {
            const enabled = !getNotesEnabled();
            toggleSpan.textContent = enabled ? "[hide notes]" : "[show notes]";

            setNotesEnabled(enabled);

            if (!enabled) {
                // Hide any active input
                finish();
            }

            // Reload notes
            loadNotes();
        });

        // Adjust notes on window resize
        window.addEventListener("resize", loadNotes);

        loadNotes();
    }

    initializeNotes();
    document.addEventListener("astro:after-swap", initializeNotes);
</script>
